{"version":3,"sources":["component/GameIcon.js","GameLogic.js","App.js","reportWebVitals.js","index.js"],"names":["GameIcon","item","className","winnginCombination","checkWinner","game","player","output","forEach","val","index","push","iswinner","status","combination","count","length","indexOf","checkTie","some","value","emptyGame","App","useState","setGame","setPlayer","gameIsPlaying","setGameStatus","gameText","setGameText","gameCount","xScore","oScore","drawScore","gameStats","setGameStats","winCombination","setWinCombination","play","id","newGame","gameStatus","isPlaying","winner","text","isWinner","toUpperCase","checkGameStatus","console","log","checkIndexInWinCombination","onClick","map","itemindex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9c3db96.chunk.js","sourcesContent":["import { FaTimes, FaRegCircle } from 'react-icons/fa'\r\n\r\nconst GameIcon = ({ item }) => {\r\n\tif (item === 'x') return <FaTimes className='gameXIcon' />\r\n\telse if (item === 'o') return <FaRegCircle className='gameOIcon' />\r\n\telse return null\r\n}\r\n\r\nexport default GameIcon\r\n","const winnginCombination = [\r\n\t[0, 1, 2],\r\n\t[3, 4, 5],\r\n\t[6, 7, 8],\r\n\t[0, 3, 6],\r\n\t[1, 4, 7],\r\n\t[2, 5, 8],\r\n\t[0, 4, 8],\r\n\t[2, 4, 6],\r\n]\r\n\r\nexport const checkGameStatus = (game, player) => {\r\n\tlet gameStatus = { isPlaying: true, winner: null, text: '', combination: [] }\r\n\tlet isWinner = checkWinner(game, player)\r\n\r\n\tif (isWinner.status) {\r\n\t\tgameStatus = {\r\n\t\t\tisPlaying: false,\r\n\t\t\twinner: player,\r\n\t\t\ttext: player.toUpperCase() + ' is a winner',\r\n\t\t\tcombination: isWinner.combination,\r\n\t\t}\r\n\t} else {\r\n\t\tlet isTie = checkTie(game)\r\n\t\tif (isTie) {\r\n\t\t\tgameStatus = {\r\n\t\t\t\tisPlaying: false,\r\n\t\t\t\twinner: null,\r\n\t\t\t\ttext: \"It's a draw\",\r\n\t\t\t\tcombination: [],\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn gameStatus\r\n}\r\n\r\nexport const checkWinner = (game, player) => {\r\n\tlet output = []\r\n\tgame.forEach((val, index) => {\r\n\t\tif (val === player) output.push(index)\r\n\t})\r\n\r\n\tlet iswinner = { status: false, combination: [] }\r\n\tlet count = 0\r\n\tif (output.length >= 3) {\r\n\t\tfor (let item of winnginCombination) {\r\n\t\t\tfor (let index of item) {\r\n\t\t\t\tif (output.indexOf(index) === -1) {\r\n\t\t\t\t\tbreak\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcount = count + 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (count === 3) {\r\n\t\t\t\tiswinner.status = true\r\n\t\t\t\tiswinner.combination = item\r\n\t\t\t\tbreak\r\n\t\t\t} else {\r\n\t\t\t\tcount = 0\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn iswinner\r\n}\r\n\r\nexport const checkTie = (game) => {\r\n\tconst isTie = game.some((value) => {\r\n\t\treturn value === ''\r\n\t})\r\n\treturn !isTie\r\n}\r\n","import './App.css'\nimport { useState } from 'react'\nimport GameIcon from './component/GameIcon'\nimport { checkGameStatus } from './GameLogic'\nimport { FaPlay } from 'react-icons/fa'\n\nconst emptyGame = ['', '', '', '', '', '', '', '', '']\n\nfunction App() {\n\tconst [game, setGame] = useState(['', '', '', '', '', '', '', '', ''])\n\tconst [player, setPlayer] = useState('x')\n\tconst [gameIsPlaying, setGameStatus] = useState(false)\n\tconst [gameText, setGameText] = useState('Start the Game')\n\tconst [gameStats, setGameStats] = useState({\n\t\tgameCount: 0,\n\t\txScore: 0,\n\t\toScore: 0,\n\t\tdrawScore: 0,\n\t})\n\tconst [winCombination, setWinCombination] = useState([])\n\n\tconst play = (id) => {\n\t\tif (game[id] === '') {\n\t\t\tlet newGame = game\n\t\t\tnewGame[id] = player\n\t\t\tsetGame(newGame)\n\t\t\tlet gameStatus = checkGameStatus(game, player)\n\t\t\tif (!gameStatus.isPlaying) {\n\t\t\t\tsetGameStatus(gameStatus.isPlaying)\n\t\t\t\tsetGameText(gameStatus.text)\n\t\t\t\tif (gameStatus.combination.length === 3) {\n\t\t\t\t\tsetWinCombination(gameStatus.combination)\n\t\t\t\t}\n\t\t\t\tif (gameStatus.winner === 'x') {\n\t\t\t\t\tsetGameStats({\n\t\t\t\t\t\t...gameStats,\n\t\t\t\t\t\txScore: gameStats.xScore + 1,\n\t\t\t\t\t\tgameCount: gameStats.gameCount + 1,\n\t\t\t\t\t})\n\t\t\t\t} else if (gameStatus.winner === 'o') {\n\t\t\t\t\tsetGameStats({\n\t\t\t\t\t\t...gameStats,\n\t\t\t\t\t\toScore: gameStats.oScore + 1,\n\t\t\t\t\t\tgameCount: gameStats.gameCount + 1,\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tsetGameStats({\n\t\t\t\t\t\t...gameStats,\n\t\t\t\t\t\tdrawScore: gameStats.drawScore + 1,\n\t\t\t\t\t\tgameCount: gameStats.gameCount + 1,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetPlayer(player === 'x' ? 'o' : 'x')\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log(id + ' is already occupied')\n\t\t}\n\t}\n\n\tconst checkIndexInWinCombination = (index) => {\n\t\tlet status = false\n\t\tif (winCombination.length === 3) {\n\t\t\tif (winCombination.indexOf(index) !== -1) {\n\t\t\t\tstatus = true\n\t\t\t}\n\t\t}\n\t\treturn status\n\t}\n\n\tconst newGame = () => {\n\t\tsetGame([...emptyGame])\n\t\tsetPlayer('x')\n\t\tsetGameStatus(true)\n\t\tsetGameText('Start the Game')\n\t\tsetWinCombination([])\n\t\tconsole.log(gameStats)\n\t}\n\n\treturn (\n\t\t<div className='app'>\n\t\t\t<div className='appHeader'>\n\t\t\t\t<h2>Tic Tac Toe</h2>\n\t\t\t\t{gameIsPlaying && <h4>Turn: Player {player.toUpperCase()}</h4>}\n\t\t\t\t{!gameIsPlaying && <h4>{gameText}</h4>}\n\t\t\t</div>\n\t\t\t<div className='appBody'>\n\t\t\t\t<div className='appGame'>\n\t\t\t\t\t{!gameIsPlaying && (\n\t\t\t\t\t\t<div className='appBtnContainer'>\n\t\t\t\t\t\t\t<FaPlay className='appPlayBtn' onClick={newGame} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{game.map((item, itemindex) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={itemindex}\n\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\tcheckIndexInWinCombination(itemindex)\n\t\t\t\t\t\t\t\t\t? 'appGameCell selected'\n\t\t\t\t\t\t\t\t\t: 'appGameCell'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tonClick={() => play(itemindex)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<GameIcon item={item} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<div className='appGameStats'>\n\t\t\t\t\t<div className='appGameScore'>\n\t\t\t\t\t\t<span>Game #</span>\n\t\t\t\t\t\t<span>{gameStats.gameCount}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='appGameScore'>\n\t\t\t\t\t\t<span>Player X</span>\n\t\t\t\t\t\t<span>{gameStats.xScore}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='appGameScore'>\n\t\t\t\t\t\t<span>Player O</span>\n\t\t\t\t\t\t<span>{gameStats.oScore}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='appGameScore'>\n\t\t\t\t\t\t<span>Draw</span>\n\t\t\t\t\t\t<span>{gameStats.drawScore}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<footer className='appFooter'>\n\t\t\t\t<span>Copyright © 2021 Tic Tac Toe | Nidhi Singh</span>\n\t\t\t</footer>\n\t\t</div>\n\t)\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// import 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n// testing live share\nreportWebVitals()\n"],"sourceRoot":""}