{"version":3,"sources":["component/GameIcon.js","component/BotSwitch.js","asset/logo.png","GameLogic.js","App.js","reportWebVitals.js","index.js"],"names":["GameIcon","item","className","BotSwitch","botStatus","setBotStatus","onClick","winnginCombination","getGamePosition","game","player","output","opponent","empty","forEach","val","index","push","checkWinner","position","iswinner","status","combination","count","length","indexOf","randomPosition","Math","floor","random","defendingPosition","defendingPositionId","value","newPosition","attackingPosition","attackingPositionId","emptyGame","App","useState","setGame","setPlayer","gameStatus","setGameStatus","gameText","setGameText","gameCount","xScore","oScore","drawScore","gameStats","setGameStats","winCombination","setWinCombination","play","useCallback","id","newGame","curGameStatus","winner","gamePosition","isWinner","checkGameStatus","console","log","useEffect","botNextPosition","getBotNextPosition","checkIndexInWinCombination","src","logo","alt","toUpperCase","map","itemindex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1197d6f5.chunk.js","sourcesContent":["import { FaTimes, FaRegCircle } from 'react-icons/fa'\r\n\r\nconst GameIcon = ({ item }) => {\r\n\tif (item === 'x') return <FaTimes className='gameXIcon' />\r\n\telse if (item === 'o') return <FaRegCircle className='gameOIcon' />\r\n\telse return null\r\n}\r\n\r\nexport default GameIcon\r\n","import { FaUserAstronaut, FaUser } from 'react-icons/fa'\r\n\r\nconst BotSwitch = ({ botStatus, setBotStatus }) => {\r\n\treturn (\r\n\t\t<div className='appBotSwitch'>\r\n\t\t\t<div\r\n\t\t\t\tclassName={botStatus ? 'appSwitchBtn selected' : 'appSwitchBtn'}\r\n\t\t\t\tonClick={() => setBotStatus(!botStatus)}\r\n\t\t\t>\r\n\t\t\t\t<FaUserAstronaut className='appBotSwitchIcon' />\r\n\t\t\t\t<span>BOT</span>\r\n\t\t\t</div>\r\n\t\t\t<div\r\n\t\t\t\tclassName={botStatus ? 'appSwitchBtn' : 'appSwitchBtn selected'}\r\n\t\t\t\tonClick={() => setBotStatus(!botStatus)}\r\n\t\t\t>\r\n\t\t\t\t<FaUser className='appBotSwitchIcon' />\r\n\t\t\t\t<span>2PLAYERS</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default BotSwitch\r\n","export default __webpack_public_path__ + \"static/media/logo.1ef0b2dd.png\";","const winnginCombination = [\r\n\t[0, 1, 2],\r\n\t[3, 4, 5],\r\n\t[6, 7, 8],\r\n\t[0, 3, 6],\r\n\t[1, 4, 7],\r\n\t[2, 5, 8],\r\n\t[0, 4, 8],\r\n\t[2, 4, 6],\r\n]\r\n\r\n//get game position\r\nconst getGamePosition = (game, player) => {\r\n\tlet output = { player: [], opponent: [], empty: [] }\r\n\tgame.forEach((val, index) => {\r\n\t\tif (val === player) output.player.push(index)\r\n\t\telse if (val === '') output.empty.push(index)\r\n\t\telse output.opponent.push(index)\r\n\t})\r\n\treturn output\r\n}\r\n\r\n// check game status\r\nexport const checkGameStatus = (game, player) => {\r\n\tlet gameStatus = { status: true, winner: null, combination: [] }\r\n\tlet gamePosition = getGamePosition(game, player)\r\n\tlet isWinner = checkWinner(gamePosition.player)\r\n\r\n\tif (isWinner.status) {\r\n\t\tgameStatus = {\r\n\t\t\tstatus: false,\r\n\t\t\twinner: player,\r\n\t\t\tcombination: isWinner.combination,\r\n\t\t}\r\n\t} else {\r\n\t\tif (gamePosition.empty.length === 0) {\r\n\t\t\tgameStatus = {\r\n\t\t\t\tstatus: false,\r\n\t\t\t\twinner: null,\r\n\t\t\t\tcombination: [],\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn gameStatus\r\n}\r\n\r\nconst checkWinner = (position) => {\r\n\tlet iswinner = { status: false, combination: [] }\r\n\tlet count = 0\r\n\tif (position.length >= 3) {\r\n\t\tfor (let item of winnginCombination) {\r\n\t\t\tfor (let index of item) {\r\n\t\t\t\tif (position.indexOf(index) === -1) {\r\n\t\t\t\t\tbreak\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcount = count + 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (count === 3) {\r\n\t\t\t\tiswinner.status = true\r\n\t\t\t\tiswinner.combination = item\r\n\t\t\t\tbreak\r\n\t\t\t} else {\r\n\t\t\t\tcount = 0\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn iswinner\r\n}\r\n\r\n// Get Bot Next Position\r\nexport const getBotNextPosition = (game, player) => {\r\n\tconst gamePosition = getGamePosition(game, player)\r\n\tlet botNextPosition = attackingPosition(gamePosition)\r\n\tif (botNextPosition === -1) botNextPosition = defendingPosition(gamePosition)\r\n\tif (botNextPosition === -1) botNextPosition = randomPosition(gamePosition)\r\n\r\n\treturn botNextPosition\r\n}\r\n\r\n// Random position\r\nconst randomPosition = (position) => {\r\n\tvar randomPositionId =\r\n\t\tposition.empty[Math.floor(Math.random() * position.empty.length)]\r\n\treturn randomPositionId\r\n}\r\n\r\n// Defending position\r\nconst defendingPosition = (position) => {\r\n\tlet defendingPositionId = -1\r\n\tfor (let value of position.empty) {\r\n\t\tlet newPosition = [...position.opponent, value]\r\n\t\tconst isWinner = checkWinner(newPosition)\r\n\t\tif (isWinner.status) {\r\n\t\t\tdefendingPositionId = value\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\treturn defendingPositionId\r\n}\r\n\r\n// Attacking position\r\nconst attackingPosition = (position) => {\r\n\tlet attackingPositionId = -1\r\n\tfor (let value of position.empty) {\r\n\t\tlet newPosition = [...position.player, value]\r\n\t\tconst isWinner = checkWinner(newPosition)\r\n\t\tif (isWinner.status) {\r\n\t\t\tattackingPositionId = value\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\treturn attackingPositionId\r\n}\r\n","import './App.css'\nimport { useState, useEffect, useCallback } from 'react'\nimport GameIcon from './component/GameIcon'\nimport BotSwitch from './component/BotSwitch'\nimport logo from './asset/logo.png'\nimport { checkGameStatus, getBotNextPosition } from './GameLogic'\nimport { FaPlay } from 'react-icons/fa'\n\nconst emptyGame = ['', '', '', '', '', '', '', '', '']\n\nfunction App() {\n\tconst [game, setGame] = useState(['', '', '', '', '', '', '', '', ''])\n\tconst [player, setPlayer] = useState('x')\n\tconst [gameStatus, setGameStatus] = useState(false)\n\tconst [gameText, setGameText] = useState('Start the Game')\n\tconst [gameStats, setGameStats] = useState({\n\t\tgameCount: 0,\n\t\txScore: 0,\n\t\toScore: 0,\n\t\tdrawScore: 0,\n\t})\n\tconst [winCombination, setWinCombination] = useState([])\n\tconst [botStatus, setBotStatus] = useState(true)\n\n\tconst play = useCallback(\n\t\t(id) => {\n\t\t\tif (game[id] === '') {\n\t\t\t\tlet newGame = game\n\t\t\t\tnewGame[id] = player\n\t\t\t\tsetGame(newGame)\n\t\t\t\tlet curGameStatus = checkGameStatus(game, player)\n\t\t\t\tif (curGameStatus.status) {\n\t\t\t\t\tsetPlayer(player === 'x' ? 'o' : 'x')\n\t\t\t\t} else {\n\t\t\t\t\tsetGameStatus(curGameStatus.status)\n\t\t\t\t\tif (curGameStatus.combination.length === 3) {\n\t\t\t\t\t\tsetWinCombination(curGameStatus.combination)\n\t\t\t\t\t}\n\t\t\t\t\tif (curGameStatus.winner === 'x') {\n\t\t\t\t\t\tsetGameText('Winner: Player X')\n\t\t\t\t\t\tsetGameStats({\n\t\t\t\t\t\t\t...gameStats,\n\t\t\t\t\t\t\txScore: gameStats.xScore + 1,\n\t\t\t\t\t\t\tgameCount: gameStats.gameCount + 1,\n\t\t\t\t\t\t})\n\t\t\t\t\t} else if (curGameStatus.winner === 'o') {\n\t\t\t\t\t\tsetGameText('Winner: Player O')\n\t\t\t\t\t\tsetGameStats({\n\t\t\t\t\t\t\t...gameStats,\n\t\t\t\t\t\t\toScore: gameStats.oScore + 1,\n\t\t\t\t\t\t\tgameCount: gameStats.gameCount + 1,\n\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetGameText(\"It's a draw\")\n\t\t\t\t\t\tsetGameStats({\n\t\t\t\t\t\t\t...gameStats,\n\t\t\t\t\t\t\tdrawScore: gameStats.drawScore + 1,\n\t\t\t\t\t\t\tgameCount: gameStats.gameCount + 1,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(id + ' is already occupied')\n\t\t\t}\n\t\t},\n\t\t[game, gameStats, player]\n\t)\n\n\tuseEffect(() => {\n\t\tif (botStatus && player === 'o' && gameStatus) {\n\t\t\tplay(getBotNextPosition(game, player))\n\t\t}\n\t}, [game, gameStatus, botStatus, player, play])\n\n\tconst checkIndexInWinCombination = (index) => {\n\t\tlet status = false\n\t\tif (winCombination.length === 3) {\n\t\t\tif (winCombination.indexOf(index) !== -1) {\n\t\t\t\tstatus = true\n\t\t\t}\n\t\t}\n\t\treturn status\n\t}\n\n\tconst newGame = () => {\n\t\tsetGame([...emptyGame])\n\t\tsetPlayer('x')\n\t\tsetGameStatus(true)\n\t\tsetGameText('Start the Game')\n\t\tsetWinCombination([])\n\t}\n\n\treturn (\n\t\t<div className='app'>\n\t\t\t<div className='appHeader'>\n\t\t\t\t<div className='appTitle'>\n\t\t\t\t\t<img className='appLogo' src={logo} alt='logo' />\n\t\t\t\t\t<span>Tic Tac Toe</span>\n\t\t\t\t</div>\n\t\t\t\t<BotSwitch botStatus={botStatus} setBotStatus={setBotStatus} />\n\t\t\t\t{gameStatus && (\n\t\t\t\t\t<h4 className='appSubTitle'>Turn: Player {player.toUpperCase()}</h4>\n\t\t\t\t)}\n\t\t\t\t{!gameStatus && <h4 className='appSubTitle'>{gameText}</h4>}\n\t\t\t</div>\n\t\t\t<div className='appBody'>\n\t\t\t\t<div className='appGame'>\n\t\t\t\t\t{!gameStatus && (\n\t\t\t\t\t\t<div className='appBtnContainer'>\n\t\t\t\t\t\t\t<FaPlay className='appPlayBtn' onClick={newGame} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{game.map((item, itemindex) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={itemindex}\n\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\tcheckIndexInWinCombination(itemindex)\n\t\t\t\t\t\t\t\t\t? 'appGameCell selected'\n\t\t\t\t\t\t\t\t\t: 'appGameCell'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tonClick={() => play(itemindex)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<GameIcon item={item} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<div className='appGameStats'>\n\t\t\t\t\t<div className='appGameScore'>\n\t\t\t\t\t\t<span className='appGameScoreHeader'>Game #</span>\n\t\t\t\t\t\t<span className='appGameScoreData'>{gameStats.gameCount}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='appGameScore'>\n\t\t\t\t\t\t<span className='appGameScoreHeader'>Player X</span>\n\t\t\t\t\t\t<span className='appGameScoreData'>{gameStats.xScore}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='appGameScore'>\n\t\t\t\t\t\t<span className='appGameScoreHeader'>Player O</span>\n\t\t\t\t\t\t<span className='appGameScoreData'>{gameStats.oScore}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='appGameScore'>\n\t\t\t\t\t\t<span className='appGameScoreHeader'>Draw</span>\n\t\t\t\t\t\t<span className='appGameScoreData'>{gameStats.drawScore}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<footer className='appFooter'>\n\t\t\t\t<span>Copyright © 2021 Tic Tac Toe | Nidhi Singh</span>\n\t\t\t</footer>\n\t\t</div>\n\t)\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// import 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n// testing live share\nreportWebVitals()\n"],"sourceRoot":""}